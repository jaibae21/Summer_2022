OOP Notes: 5/31
objects store states in fields: data types or other objects, not usually just primitive objects
methods: defines behaviors, the functions associated with it
data hiding: fundamental to OOP, keeps data hidden from certain functions and keeps people from just changing it
Structures: contains the objects
	can't but struct of same name in a struct, can cause overload of memory 
	functions can go into structs but better to just make a class
class is a blueprint and preferred way to represent objects
	bicycle class with multiple instances of an object
	class files usually in a .h, then you define or use that what's in .h in a different file
		helps you interface
	#pragma once //executes a header once
private: not even object's child can see, only the class can see what's been defined
public: exposed to everything, the real interface,
have to have .cpp of same name as .h to implement the functions previously named 
this->X=X  //pointer to the same object it references
Encapsulation: what happens when you create a class, creating the data and everything in one little area
	encapsulating something in one easy to use things
Data Hiding: hiding internal state of object, encapsulation does this
	not directly accessible or changeable
	have to perform object's actions through methods 
Data abstraction: aspect of hiding things
	Hiding how the behaviors is performed so nothing outside the object becomes dependent on it 
	Dependencies are important, important not to program them, basically if one thing changes then a lot of other stuff also has to change
Inheritance: parent and child classes, create a base blueprint and then extending it by giving it more fields and behaviors and changing the name
	class 'subclass_name': public 'parent_name'
	reduces dependency, because you're only extending so if you change it for a specific object you only change it from the subclass or if its a larger scope from the parent class
	only have to implement the new features 
Multiple Inheritance: more than one parent class
	two parent classes with same object and same name, how does that get resolved
	can't share the same superclass and a class inherits from a class that, itself is a subclass of another class
Polymorphism: requires inheritance,
	virtual: if a child instatiates this class, then that child has to create a function itself and overwrite the other one
	If you don't declare virtual then it doesn't run polymorphism at runtime or if there is a subclass specific action in the destructor 
Messages: 
	
	
	
	
	
	
	
	
